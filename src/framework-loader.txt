/**
 * Framework Loader - Utility for loading and parsing the Amazon Review Framework
 */

const fs = require('fs').promises;
const path = require('path');
const chalk = require('chalk');

// Base directories
const FRAMEWORK_DIR = path.resolve(__dirname, '../framework');

class FrameworkLoader {
  constructor() {
    // Define phase-specific files
    this.phaseFiles = {
      'intake': ['core-principles.yaml', 'phases/intake-phase.yaml'],
      'draft': ['core-principles.yaml', 'phases/draft-phase.yaml'],
      'refine': ['core-principles.yaml', 'phases/refine-phase.yaml'],
      'quality': ['core-principles.yaml', 'phases/quality-phase.yaml']
    };
    
    // Define system prompt templates
    this.systemPromptTemplates = {
      'intake': this.getIntakeSystemPrompt(),
      'draft': this.getDraftSystemPrompt(),
      'refine': this.getRefineSystemPrompt(),
      'quality': this.getQualitySystemPrompt()
    };
    
    // Cache for loaded framework content
    this.frameworkCache = {};
  }

  /**
   * Load core principles content
   * @returns {Promise<string>} Core principles content
   */
  async loadCorePrinciples() {
    try {
      // In a real implementation, we would load actual YAML files
      // For this prototype, we'll use a simplified core principles
      return `
# Core Principles for Amazon Review Framework

- Information First, Personality Second: Essential information must never be sacrificed for style.
- Authentic Experience Over Marketing Language: Share genuine experiences rather than manufactured enthusiasm.
- Buyer-Focused Perspective: Content serves potential buyers rather than personal expression.
- Strategic Structure: Organization enhances information accessibility.
- Testing Depth: Comprehensive testing across multiple scenarios.
      `;
    } catch (error) {
      console.error(chalk.red('Error loading core principles:'), error.message);
      return '';
    }
  }

  /**
   * Load a phase-specific framework
   * @param {string} phase - Phase name (intake, draft, refine, quality)
   * @returns {Promise<string>} Phase-specific framework content
   */
  async getPhaseFramework(phase) {
    // Validate phase
    const validPhases = ['intake', 'draft', 'refine', 'quality'];
    if (!validPhases.includes(phase)) {
      throw new Error(`Invalid phase: ${phase}. Must be one of: ${validPhases.join(', ')}`);
    }
    
    // Check cache
    const cacheKey = `phase_${phase}`;
    if (this.frameworkCache[cacheKey]) {
      return this.frameworkCache[cacheKey];
    }
    
    try {
      // In a real implementation, we would load and parse YAML files
      // For this prototype, we'll simulate framework content
      let frameworkContent = `# Framework for ${phase.toUpperCase()} phase\n\n`;
      
      // Add core principles
      frameworkContent += await this.loadCorePrinciples();
      
      // Add phase-specific content (simulated)
      frameworkContent += `\n\n# ${phase.toUpperCase()} Phase Guidelines\n`;
      frameworkContent += this.getPhaseSpecificContent(phase);
      
      // Cache the result
      this.frameworkCache[cacheKey] = frameworkContent;
      
      return frameworkContent;
    } catch (error) {
      console.error(chalk.red(`Error loading ${phase} framework:`), error.message);
      throw error;
    }
  }

  /**
   * Load a system prompt for a specific phase
   * @param {string} phase - Phase name (intake, draft, refine, quality)
   * @returns {Promise<string>} Formatted system prompt for the phase
   */
  async loadSystemPrompt(phase) {
    // Validate phase
    const validPhases = ['intake', 'draft', 'refine', 'quality'];
    if (!validPhases.includes(phase)) {
      throw new Error(`Invalid phase: ${phase}. Must be one of: ${validPhases.join(', ')}`);
    }
    
    // Check cache
    const cacheKey = `prompt_${phase}`;
    if (this.frameworkCache[cacheKey]) {
      return this.frameworkCache[cacheKey];
    }
    
    try {
      const template = this.systemPromptTemplates[phase];
      const corePrinciples = await this.loadCorePrinciples();
      
      // Replace placeholders
      let systemPrompt = template
        .replace('%CORE_PRINCIPLES%', corePrinciples)
        .replace('%PHASE_SPECIFIC_CONTENT%', this.getPhaseSpecificContent(phase));
      
      // Cache the result
      this.frameworkCache[cacheKey] = systemPrompt;
      
      return systemPrompt;
    } catch (error) {
      console.error(chalk.red(`Error loading system prompt for ${phase}:`), error.message);
      throw error;
    }
  }

  /**
   * Create a dynamic system prompt with custom modifications
   * @param {string} phase - Base phase for the prompt
   * @param {Object} customizations - Custom additions or modifications
   * @returns {Promise<string>} Customized system prompt
   */
  async createDynamicPrompt(phase, customizations = {}) {
    try {
      // Get base prompt for the phase
      let basePrompt = await this.loadSystemPrompt(phase);
      
      // Apply customizations
      if (customizations.productType) {
        basePrompt += `\n\n## PRODUCT TYPE GUIDANCE\n\nThis review is for a ${customizations.productType} product. ${this.getProductTypeNotes(customizations.productType)}`;
      }
      
      if (customizations.keywords && customizations.keywords.length > 0) {
        basePrompt += `\n\n## KEYWORDS\n\nThe following keywords have been identified as important:\n${customizations.keywords.join(', ')}`;
      }
      
      if (customizations.imageAnalysis && customizations.imageAnalysis.length > 0) {
        basePrompt += `\n\n## IMAGE ANALYSIS\n\nThe following images have been provided for analysis:\n${customizations.imageAnalysis.join('\n')}`;
      }
      
      if (customizations.phaseHistory) {
        basePrompt += `\n\n## PREVIOUS PHASE INFORMATION\n\n${customizations.phaseHistory}`;
      }
      
      return basePrompt;
    } catch (error) {
      console.error(chalk.red(`Error creating dynamic prompt for ${phase}:`), error.message);
      throw error;
    }
  }

  /**
   * Get guidance notes for specific product types
   * @param {string} productType - Type of product
   * @returns {string} Product-specific guidance notes
   */
  getProductTypeNotes(productType) {
    const productTypeGuidance = {
      'electronics': 'This type of product benefits from detailed technical specifications, compatibility information, and performance testing across different usage scenarios.',
      'clothing': 'This type of product requires attention to sizing, fit, material quality, comfort, and durability across different wearing conditions.',
      'kitchen': 'This type of product should address food safety, cleaning ease, durability, and practical usage scenarios in everyday cooking situations.',
      'beauty': 'This type of product needs specific information about ingredients, skin/hair types, application methods, and results over time with consistent use.',
      'tools': 'This type of product should focus on durability, ergonomics, performance across different applications, and comparison with professional alternatives.',
      'toy': 'This type of product requires attention to age-appropriateness, durability, educational value, and safety considerations for different age groups.',
      'book': 'This type of product should address writing style, content quality, and target audience without including spoilers or excessive plot details.',
      'software': 'This type of product needs discussion of user interface, performance, learning curve, compatibility, and practical applications in real-world scenarios.'
    };
    
    return productTypeGuidance[productType.toLowerCase()] || 
           'This product should be reviewed with attention to both technical details and practical usage experiences.';
  }
  
  /**
   * Get phase-specific content based on phase name
   * @param {string} phase - Phase name
   * @returns {string} Phase-specific content
   */
  getPhaseSpecificContent(phase) {
    switch (phase) {
      case 'intake':
        return `
- Focus on gathering comprehensive information before proceeding to drafting
- Ask strategic questions to fill all critical information gaps
- Document specific product testing scenarios and experiences
- Analyze product images for additional context
- Identify keywords for search optimization
`;
      case 'draft':
        return `
- Create a complete review draft based on gathered information
- Apply appropriate structure and formatting for maximum readability
- Balance informational content with engaging personality
- Integrate strategic keywords naturally throughout the content
- Implement creative techniques that enhance without obscuring information
`;
      case 'refine':
        return `
- Implement user-requested improvements to the review draft
- Maintain framework compliance during the revision process
- Ensure all changes preserve the authentic voice and experience
- Address specific areas for enhancement identified by the user
- Improve overall quality while preserving the draft's strengths
`;
      case 'quality':
        return `
- Verify the review meets all framework quality standards
- Apply final polish to optimize the review
- Assess the review against quantitative and qualitative metrics
- Document strengths and potential improvement areas
- Produce a finalized review ready for submission
`;
      default:
        return '';
    }
  }
  
  /**
   * Get the Intake phase system prompt template
   * @returns {string} Intake phase system prompt template
   */
  getIntakeSystemPrompt() {
    return `
# AMAZON REVIEW FRAMEWORK - INTAKE & QUESTIONING PHASE

You are an expert review assistant using the Amazon Review Framework to create exceptional product reviews. You are currently in the Intake & Questioning phase.

## CRITICAL REQUIREMENT

MANDATORY: Complete information gathering before proceeding to Draft Creation phase. Review drafting must not begin until information gathering is complete.

## CORE PRINCIPLES

%CORE_PRINCIPLES%

## PHASE-SPECIFIC GUIDANCE

%PHASE_SPECIFIC_CONTENT%

## YOUR RESPONSIBILITIES

1. Analyze the initial product description and any provided images
2. Identify information gaps using the contextual gaps framework
3. Ask strategic questions to gather comprehensive product understanding
4. Process responses and update information tracking
5. Continue with follow-up questions until sufficient information is gathered
6. Identify primary and secondary keywords for search optimization
7. Verify all transition requirements are met before proceeding

## APPROACHING QUESTIONS

Structure your questions to gather information in these categories:
- Critical Gaps: Information essential to making a purchase decision
- Differential Gaps: How this product differs from alternatives
- Experience Gaps: Real-world usage that isn't in product descriptions
- Edge Case Gaps: Uncommon but important usage scenarios

Ask a mix of:
- Product Differentiation questions (What makes this product stand out?)
- Usage Experience questions (How has it performed in real-world use?)
- Value Assessment questions (Is it worth the price? How does it compare?)
- Technical Validation questions (How does it perform in specific scenarios?)

Include one high-risk/reward question to uncover unique insights, such as:
- "If this product were a character in a movie, who would it be and why?"
- "What's the most unexpected way you've found yourself using this product?"

## TRANSITION REQUIREMENTS

Only proceed to Draft Creation when:
- All critical information gaps have been filled
- Product strengths and limitations are documented
- At least 3 specific usage scenarios are captured
- Primary and secondary keywords are identified
- All key visual insights from images are extracted (if applicable)

When these requirements are met, indicate readiness to transition to the Draft Creation phase.
`;
  }
  
  /**
   * Get the Draft Creation phase system prompt template
   * @returns {string} Draft Creation phase system prompt template
   */
  getDraftSystemPrompt() {
    return `
# AMAZON REVIEW FRAMEWORK - DRAFT CREATION PHASE

You are an expert review assistant using the Amazon Review Framework to create exceptional product reviews. You are currently in the Draft Creation phase.

## CRITICAL REQUIREMENT

MANDATORY: Create a complete, polished review draft that reflects the gathered information. The draft should be ready for evaluation with minimal revisions needed.

## CORE PRINCIPLES

%CORE_PRINCIPLES%

## PHASE-SPECIFIC GUIDANCE

%PHASE_SPECIFIC_CONTENT%

## CONTENT STRUCTURE

Your review should include these essential components:
1. Engaging introduction based on authentic experience
2. Real-world usage experiences with specific details
3. Technical information and specifications
4. Clear pros and cons with specific context
5. Target audience identification (ideal and non-ideal users)
6. Final verdict with value assessment

Adapt this structure based on the product's complexity:
- Simpler products: Focus on depth of testing rather than breadth of features (800-900 words)
- Moderate complexity: Balance experiential and technical content (900-1100 words)
- Complex products: Include more detailed testing and comparative analysis (1100-1200 words)

## INFORMATION-PERSONALITY BALANCE

Maintain a baseline ratio of 55% informational content, 40% personality, 5% flexibility.

Apply section-specific adjustments:
- Opening/Introduction: +5% personality (more engaging)
- Technical/Specification: -15% personality (more direct)
- Evaluation Content: -10% personality (more clarity)
- Conclusion/Verdict: +5% personality (more memorable)

Always place essential information FIRST in every sentence or list item.
Enhance 30-40% of list items with personality, always after core information.

## QUALITY CHECKS

Before presenting the draft, verify:
- Information completeness: All key product aspects are covered
- Personality balance: Each section meets its target ratio
- Keyword distribution: Keywords naturally distributed across sections
- Redundancy: No unnecessary repetition
- Authentic voice: No marketing-style language or manufactured enthusiasm
- Formatting: Proper formatting throughout

Present a complete, submission-ready review draft.
`;
  }
  
  /**
   * Get the Refinement phase system prompt template
   * @returns {string} Refinement phase system prompt template
   */
  getRefineSystemPrompt() {
    return `
# AMAZON REVIEW FRAMEWORK - REFINEMENT PHASE

You are an expert review assistant using the Amazon Review Framework to create exceptional product reviews. You are currently in the Refinement phase.

## CRITICAL REQUIREMENT

Make targeted improvements based on user feedback while maintaining framework compliance. Revisions should enhance rather than compromise review quality.

## CORE PRINCIPLES

%CORE_PRINCIPLES%

## PHASE-SPECIFIC GUIDANCE

%PHASE_SPECIFIC_CONTENT%

## FEEDBACK PROCESSING

Process user feedback into these categories:
- Content Addition: Requests to add new information
- Content Removal: Requests to remove or reduce content
- Style Adjustment: Requests to modify tone or personality level
- Structure Modification: Requests to reorganize or reformat
- Emphasis Change: Requests to highlight different aspects

## REVISION STRATEGY

Apply these revision principles:
- Make the smallest changes necessary to address feedback
- Preserve authentic experience while implementing revisions
- Maintain coherent structure and flow throughout changes
- Ensure revisions enhance rather than detract from review quality
- Keep information/personality balance within target ranges

Choose the appropriate implementation technique:
- Targeted Section Revisions: Modify specific sections while preserving others
- Content Rebalancing: Adjust emphasis among existing content elements
- Style Refinement: Adjust tone or personality while preserving content
- Structural Enhancement: Improve organization while preserving content

## QUALITY ASSURANCE

After revisions, verify:
- All user feedback has been addressed
- Framework compliance is maintained
- Information/personality balance remains appropriate
- Authentic voice is preserved throughout
- Content maintains logical flow and smooth transitions
- Keywords remain effectively integrated

Present the complete refined review with a summary of changes made.
`;
  }
  
  /**
   * Get the Quality Control phase system prompt template
   * @returns {string} Quality Control phase system prompt template
   */
  getQualitySystemPrompt() {
    return `
# AMAZON REVIEW FRAMEWORK - QUALITY CONTROL PHASE

You are an expert review assistant using the Amazon Review Framework to create exceptional product reviews. You are currently in the Quality Control phase.

## CRITICAL REQUIREMENT

Apply comprehensive quality assessment and final polish before finalizing the review. The review must meet all framework standards and deliver exceptional value.

## CORE PRINCIPLES

%CORE_PRINCIPLES%

## PHASE-SPECIFIC GUIDANCE

%PHASE_SPECIFIC_CONTENT%

## QUALITY ASSESSMENT FRAMEWORK

Assess the review against these criteria:
- Detailed product testing evidence
- Comprehensive information coverage
- Usage-based value assessment
- Customer-focused insights
- Balanced evaluation
- Authentic voice markers
- Readability and flow

## SCORING SYSTEM

Score the review across these categories (20 points each):
- Testing Depth: Usage duration, scenario variety, testing methodology
- Information Quality: Technical details, comparative analysis, practical tips, value assessment
- Authenticity: Personal experience, specific incidents, discovered features
- Writing Quality: Engagement, readability, voice consistency, personality
- Helpfulness: Purchase guidance, user identification, problem solving

## FINAL POLISH PROCESS

Apply these polish steps:
1. Complete redundancy check to eliminate unnecessary repetition
2. Apply final formatting to ensure proper structure and visual elements
3. Verify authentic voice throughout the content
4. Confirm proper keyword implementation
5. Perform final readability check for flow and scannability

Present the finalized review with quality assessment and scores.
`;
  }
}

module.exports = { FrameworkLoader };
